import numpy as np
from math import factorial
import matplotlib.pyplot as plt


x=[3.50, 3.55, 3.60 ,3.65, 3.70, 3.75, 3.80, 3.85, 3.90, 3.95, 4.00]
y=[33.1154, 34.8133, 36.5982, 38.4747, 40.4473, 42.5211, 44.7012, 46.9931, 49.4024, 51.9354, 54.5982]
h = x[1] - x[0]
x1=3.522
x2=3.905
q=(x1 - x[0])/h #Для 1 інтерп. ф-ли Нтютона
q1 = (x2-x[-1])/h #Для 2 інтерп. ф-ли Нтютона
def n(y,j): #обчислення кінцевих різниць
    mas=[]
    for i in range(len(y)):
        mas.append(y[i] - y[i-1])
    mas.pop(0)  
    if j == 1:
        return mas
    else:
        j-=1
        return n(mas, j)
 #Перша інтерполяційна формула Ньютона   
s_1 = y[0]+q*n(y,1)[0]+q*(q-1)*n(y,2)[0]/factorial(2)
s_2 = q*(q-1)*(q-2)*n(y,3)[0]/factorial(3)
s_3 = q*(q-1)*(q-2)*(q-3)*n(y,4)[0]/factorial(4)
s_4 = q*(q-1)*(q-2)*(q-3)*(q-4)*n(y,5)[0]/factorial(5)
n_1 = s_1 + s_2 + s_3 + s_4
#Друга інтерполяційна формула Ньютона
t1 = y[11] + q1*n(y,1)[1]/factorial(2)
t2 = q1*(q1+1)*(q1+2)*n(y,3)[2]/factorial(3)
t3 = q1*(q1+1)*(q1+2)*(q1+3)*n(y,4)[3]/factorial(4)
t4 = q1*(q1+1)*(q1+2)*(q1+3)*(q1+4)*n(y,5)[4]/factorial(5)
t5 = q1*(q1+1)*(q1+2)*(q1+3)*(q1+4)*(q1+5)*n(y,6)[5]/factorial(6)
t6 = q1*(q1+1)*(q1+2)*(q1+3)*(q1+4)*(q1+5)*(q1+6)*n(y,7)[6]/factorial(7)
t7 = q1*(q1+1)*(q1+2)*(q1+3)*(q1+4)*(q1+5)*(q1+6)*(q1+7)*n(y,8)[7]/factorial(8)
t8 = q1*(q1+1)*(q1+2)*(q1+3)*(q1+4)*(q1+5)*(q1+6)*(q1+7)*(q1+8)*n(y,9)[8]/factorial(9)
t9 = q1*(q1+1)*(q1+2)*(q1+3)*(q1+4)*(q1+5)*(q1+6)*(q1+7)*(q1+8)*(q1+9)*n(y,10)[9]/factorial(10)
t10 = q1*(q1+1)*(q1+2)*(q1+3)*(q1+4)*(q1+5)*(q1+6)*(q1+7)*(q1+8)*(q1+9)*(q1+10)*n(y,11)[10]/factorial(11)
n_2 =  t1+t2+t3+t4+t5+t6+t7+t8+t9+t10
x_1=np.linspace(np.min(x), np.max(x))
y_1=np.linspace(np.min(y), np.max(y))
plt.plot(x,y, 'ro', x_1, y_1)
plt.title('Graph of the interpolation function')
plt.xlabel('x')
plt.ylabel('y')
plt.grid()
plt.show()
