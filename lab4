import numpy as np
a =  m_sqr_arr = np.array([[2, 3, 1], [-1, 1, 0], [1, 2, -1]])
b = m_sqr_arr = np.array([[1, 2, 1], [0, 1, 2], [3, 1, 1]])
c = a.dot(b)
k = b.dot(a)
p = c - k
print(p)

2)
import numpy as np
import math
a = np.matrix('-1 2; 0 1')
b = np.matrix('-1 2; 0 1')
c = a.dot(b)
print(c)
 
3) 
import numpy as np
a =  m_sqr_arr = np.array([[5, 8, -4], [6, 9, -5], [4, 7, -3]])
b = m_sqr_arr = np.array([[3, 2, 5], [4, -1, 3], [9, 6, 5]])
p = a.dot(b)
print(p)  

4)
import numpy as np
import math
a = np.matrix('2 3 4; 1 0 6; 7 8 9')
a_det = np.linalg.det(a) 
print(format(a_det, '.9g'))
 
5)
import numpy as np
a =  m_sqr_arr = np.array([[2, 3, 4, 1], [1, 2, 3, 4], [3, 4, 1, 2], [4, 1, 2, 3]])
a_det = np.linalg.det(a) 
print(format(a_det, '9g'))
 
6)
import numpy as np
a =  m_sqr_arr = np.array([[2, 5, 7], [6, 3, 4], [5, -2, -3]])
a_inv = np.linalg.inv(a)
print(format(a_inv))  

7)
import numpy as np
import math
A = np.matrix('1 2 3 4; 3 -1 2 5; 1 2 3 4; 1 3 4 5')
rank = np.linalg.matrix_rank(A)
print(rank)
 
8) import numpy as np
import math
A = np.matrix('-2 1 4; 1 4 -1; 2 3 1')
print('A=',A)
B = np.matrix('-2; -1; 0')
print('B=',B)

def kramer (A, B):
    a_det = np.linalg.det(A)
    print('Детермінант матриці = ', a_det)
    if (a_det != 0):
        print ('Розв*язуємо систему')
        x_m = np.matrix(A)
        x_m[:, 0] = B 
        print('x_m=', x_m)
        y_m = np.matrix(A)  
        y_m[:, 1] = B 
        print('y_m=',y_m)
        z_m = np.matrix(A) 
        z_m[:, 2] = B
        print('z_m=',z_m)
        x = np.linalg.det(x_m) / a_det
        y = np.linalg.det(y_m) / a_det
        z = np.linalg.det(z_m) / a_det
        print('X = ', round(x,5))

        print('Y=', round(y,5))

        print('Z=', round(z,5))
    else:
        print('Розв*язків немає')
kramer(A,B)
